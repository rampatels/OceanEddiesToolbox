function world2regionalV2(eddies_path, eddies_save_path, eddy_type, lonlimit, latlimit)%
% This function extracts realization based on longitude and latitude limits
% to track eddies
%
% Inputs:
%  eddies_path: The directory where Faghmous eddy realizations are
%                  archieved
%  eddies_save_path: The directory where you want resulting realizations and dates.mat 
%                  that is generated by this function saved.
%  eddy_type: type of eddy required to extract. Example write 'cyclonic' or 'anticyc' 
%  lonlimit: This accept only positive range of longitude. Ex lonlimit = [0, 360]
%  latlimit: Either positive and negative accepted based on hemisphere

% Paths check and Creating directory
disp('Checking dimensions of the datasets')
if ~strcmp(eddies_path(end), '/')
    eddies_path = strcat(eddies_path, '/');
end
if ~strcmp(eddies_save_path(end), '/')
    eddies_save_path = strcat(eddies_save_path, '/');
end
if ~exist(eddies_save_path, 'dir')
    mkdir(eddies_save_path);
end
% Longitude and latitude limits check
if numel(lonlimit) ~= 2 || numel(latlimit) ~= 2
    error('Only one range of longitude and latitude is accepted')
end
if ~(min(lonlimit) >= 0 && max(lonlimit) <= 360)
    error('longitude limit must be positive and between 0 to 360')
end
if ~(min(abs(latlimit)) >= 0 && max(abs(latlimit)) <= 180)
    error('latitude limit must be between 0 to 180')
end
%
disp('Dimension check is complete!!!')
%-------------
disp('Preparing filename')
% names

eddiesName = get_eddies_names(eddies_path, eddy_type);

disp('Filename is ready')
%
nfile = length(eddiesName);

% preparing dates
disp('Preparing Dates')
dates = NaN(1, nfile);

for i = 1:nfile
    file = eddiesName{i};
    [~, names, ext] = fileparts(file);
    if contains(names, eddy_type) && strcmp(ext, '.mat')
        indices = regexp(names, '[0-9]');
        numbers = names(indices);
        date = str2double(numbers(1:8));
        dates(1, i) = date; 
    end
end
save([eddies_save_path, 'dates', '.mat'], 'dates')

disp('Dates ready!!!')

% extraction
disp('Extract Eddies in Region')
parfor fInd = 1:nfile
    disp(['day : ', num2str(dates(fInd))])
    var = load(eddiesName{fInd});
    names = fieldnames(var);
    eddy = var.(names{1});
    lon = [eddy.Lon]';
    lat = [eddy.Lat]';
    if length(lon) ~= length(lat); error('inappropriate Centers'); end
    % Selected region
    eddyId = find(lon >=  min(lonlimit) & lon <= max(lonlimit)  & lat >= min(latlimit) & lat <= max(latlimit));
    % Rewriting Files
    eddies = struct('Stats', {}, 'Lat', {}, 'Lon', {}, 'Amplitude', {}, 'ThreshFound', {}, 'SurfaceArea', {},...
        'Date', {}, 'Cyc', {}, 'MeanGeoSpeed', {}, 'DetectedBy', {});
    for eId = 1:length(eddyId)
        eddies(eId).Stats = eddy(eddyId(eId)).Stats;
        eddies(eId).Lat = eddy(eddyId(eId)).Lat;
        eddies(eId).Lon = eddy(eddyId(eId)).Lon;
        eddies(eId).Amplitude = eddy(eddyId(eId)).Amplitude;
        eddies(eId).ThreshFound = eddy(eddyId(eId)).ThreshFound;
        eddies(eId).SurfaceArea = eddy(eddyId(eId)).SurfaceArea;
        eddies(eId).Date = eddy(eddyId(eId)).Date;
        eddies(eId).Cyc = eddy(eddyId(eId)).Cyc;
        eddies(eId).MeanGeoSpeed = eddy(eddyId(eId)).MeanGeoSpeed;
        eddies(eId).DetectedBy = eddy(eddyId(eId)).DetectedBy;
    end
   par_save([eddies_save_path, eddy_type, '_', num2str(dates(fInd)), '.mat'], eddies)
end
disp('Extraction Complete')
end

% function to save the data
function par_save(path, eddies)
save(path, 'eddies');
end

% Function prepares the list of files to extract data 
function [eddies_names] = get_eddies_names(eddies_path, eddy_type)
% path is the path to the eddies directory
% type is anticyclonic or cyclonic
if ~strcmp(eddies_path(end), '/')
    eddies_path = strcat(eddies_path, '/');
end
files = dir(eddies_path);
x = 0;
for i = 1:length(files)
    if ~isempty(strfind(files(i).name, eddy_type))
        x = x + 1;
    end
end
eddies_names = cell(x, 1);
x = 1;
for i = 1:length(files)
    if files(i).isdir && ~isequal(files(i).name, '.') && ~isequal(files(i).name, '..')
        rec_names = get_eddies_names([eddies_path, files(i).name, '/'], eddy_type);
        for j = 1:length(rec_names)
            eddies_names{x} = rec_names{j};
            x = x + 1;
        end
        continue;
    end
    file = files(i).name;
    [~, name, ext] = fileparts([eddies_path, file]);
    if contains(name, eddy_type) && strcmp(ext, '.mat')
        eddies_names{x} = [eddies_path, file];
        x = x + 1;
    end
end
end