function world2regional(eddies_path, eddies_save_path, eddy_type, lonlimit, latlimit)%
% This function extracts realization based on longitude and latitude limits
% to track eddies
%
% Inputs:
%  eddies_path: The directory where Faghmous eddy realizations are
%                  archieved
%  eddies_save_path: The directory where you want resulting realizations and dates.mat 
%                  that is generated by this function saved.
%  eddy_type: type of eddy required to extract. Example write 'cyclonic' or 'anticyc' 
%  lonlimit: This accept only positive range of longitude. Ex lonlimit = [0, 360]
%  latlimit: Either positive and negative accepted based on hemisphere

% Paths check and Creating directory
if ~strcmp(eddies_path(end), '/')
    eddies_path = strcat(eddies_path, '/');
end
if ~strcmp(eddies_save_path(end), '/')
    eddies_save_path = strcat(eddies_save_path, '/');
end
if ~exist(eddies_save_path, 'dir')
    mkdir(eddies_save_path);
end
% Longitude and latitude limits check
if numel(lonlimit) ~= 2 || numel(latlimit) ~= 2
    error('Only one range of longitude and latitude is accepted')
end
if ~(min(lonlimit) >= 0 && max(lonlimit) <= 360)
    error('longitude limit must be positive and between 0 to 360')
end
if ~(min(abs(latlimit)) >= 0 && max(abs(latlimit)) <= 180)
    error('latitude limit must be between 0 to 180')
end
%
disp('Preparing filename')
% names
files = dir(eddies_path);
x = 0;
for i = 1:length(files)
    if ~isempty(strfind(files(i).name, eddy_type))
        x = x + 1;
    end
end
clear i
eddy_names = cell(x, 1);
dates = NaN(x, 1);
x = 1;
for i = 1:length(files)
    file = files(i).name;
    [~, names, ext] = fileparts([eddies_path, file]);
    if contains(names, eddy_type) && strcmp(ext, '.mat')
        eddy_names{x} = [eddies_path, file];
        indices = regexp(names, '[0-9]');
        numbers = names(indices);
        date = str2double(numbers(1:8));
        dates(x,1) = date; 
        x = x + 1;
    end
end
save([eddies_save_path, 'dates', '.mat'], 'dates')
disp('Extract Eddies in Region')

nfile = length(eddy_names);
% extraction
for fInd = 1:nfile
    disp(['day : ', num2str(dates(fInd))])
    var = load(eddy_names{fInd});
    names = fieldnames(var);
    eddy = var.(names{1});
    lon = [eddy.Lon]';
    lat = [eddy.Lat]';
    if length(lon) ~= length(lat); error('inappropriate Centers'); end
    % Selected region
    eddyId = find(lon >=  min(lonlimit) & lon <= max(lonlimit)  & lat >= min(latlimit) & lat <= max(latlimit));
    % Rewriting Files
    eddies = struct('Stats', {}, 'Lat', {}, 'Lon', {}, 'Amplitude', {}, 'ThreshFound', {}, 'SurfaceArea', {},...
        'Date', {}, 'Cyc', {}, 'MeanGeoSpeed', {}, 'DetectedBy', {});
    for eId = 1:length(eddyId)
        eddies(eId).Stats = eddy(eddyId(eId)).Stats;
        eddies(eId).Lat = eddy(eddyId(eId)).Lat;
        eddies(eId).Lon = eddy(eddyId(eId)).Lon;
        eddies(eId).Amplitude = eddy(eddyId(eId)).Amplitude;
        eddies(eId).ThreshFound = eddy(eddyId(eId)).ThreshFound;
        eddies(eId).SurfaceArea = eddy(eddyId(eId)).SurfaceArea;
        eddies(eId).Date = eddy(eddyId(eId)).Date;
        eddies(eId).Cyc = eddy(eddyId(eId)).Cyc;
        eddies(eId).MeanGeoSpeed = eddy(eddyId(eId)).MeanGeoSpeed;
        eddies(eId).DetectedBy = eddy(eddyId(eId)).DetectedBy;
    end
   save([eddies_save_path, eddy_type, '_', num2str(dates(fInd)), '.mat'], 'eddies')
end
disp('Extraction Complete')
% Extra code
% % Check
% figure(1);clf
% m_proj('lambert', 'long', [100, 165], 'lat', [-70, -40])
% m_plot(lon(eddyId), lat(eddyId), '.')
% m_coast('patch', [0.9, 0.9, 0.9], 'edgecolor', 'k', 'linewidth',1);
% m_grid('box', 'fancy', 'fontsize', 12, 'fontweigh', 'bold', 'linest', 'none', 'tickdir', 'in');